<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8" import="java.util.ArrayList, com.kh.model.vo.Person"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %> <!-- taglib 항상 최상단에 선언 -->
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h1>JSTL Core Library</h1>
	
	<h3>1. 변수(속성)</h3>
	<pre>
		* 변수 선언(&lt;c:set var="변수명" value="리터럴" scope="스코프영역지정(생략가능)" &gt;)
		-변수를 선언하고 초기값을 대입해주는 기능 제공
		-해당 변수를 어떤 scope에 담아둘지 지정 가능(생략시 pageScope)
		=> 즉, 해당 scope 영역에 setAttribute라는 메서드를 이용해서 key+value로 담아놓는 것과 같음
		=> c:set을 통해 선언된 변수는 EL로 접근해서 사용 가능(단, 스크립팅 원소는 접근 불가)
		
		* 주의사항
		-변수는 타입(자료형)을 별도로 지정하지 않음
		-반드시 해당 변수의 담아두고자 하는 초기값 속성을 무조건 셋팅해줘야 함
		<!-- core library 사용하려면 EL 필수 -->
	</pre>
	
	<c:set var="num1" value="10" /> <!-- page scope에 저장 -->
	<c:set var="num2" value="20" scope="request"/>
	
	num1의 변수값 : ${num1 } <br>
					<%-- <%=num1 %> - 에러(사용불가) --%>
	num2의 변수값 : ${num2 } <br>
	
	<c:set var="result" value="${num1+num2 }" scope="session"/>
	result 변수값 : ${result } <br>
	
	<!-- 
		변수명만 지정하여 제시하면 공유범위가 가장 작은 스코프부터 값을 찾음
	 -->
	 ${num1 }<br>
	 ${pageScope.num1 }<br>
	 ${num2 }<br>
	 ${requestScope.num2 }<br>
	 ${sessionScope.result }<br>
	 
	 <c:set var="result" scope="request">
	 	9999
	 </c:set>
	 
	 ${result } <br>
	 
	 <hr>
	 
	 <pre>
	 	* 변수 삭제 (&gt;c:remove var="제거할 변수명" scope="스코프영역지정(생략가능)" &gt;)
	 	-해당 변수를 scope에서 찾아서 제거하는 태그
	 	-scope 지정 생략시 모든 scope에서 해당 변수를 다 찾아서 제거
	 	=> 해당 scope에 .removeAttribute를 사용해서 제거하는 것과 동일
	 </pre>
	 
	 삭제전 result : ${result } <br><br>
	 
	 1) 특정 scope를 지정해서 삭제 <br>
	 <c:remove var="result" scope="request"/>
	<%--  request에서 삭제후 result : ${result } <br><br> --%> <%-- session에는 남아있어 session의 result 출력 --%>
	 
	 2) 모든 scope에서 삭제 <br>
	 <c:remove var="result"/>
	 삭제후 result : ${result }
	 
	 <pre>
	 	*변수 출력 (&lt; c:out value="출력하고자하는 값" de)
	 </pre>
	 result : <c:out value="${result }"/> <br>
	 default를 설정한 result : <c:out value="${result }" default="없어요"/><br><br>
	 <!-- escpeXml 테스트  -->
	 <c:set var="outTest" value="<b>출력테스트</b>"/>
	 <c:out value="${outTest }"/><!-- escpeXml 생략시 기본값이 true == 태그로서 해석이 안된다.-->
	 <c:out value="${outTest }" escapeXml="false"/><br>
	 
	 <hr>
	 
	 <h3>2. 조건문 - if (&lt;c:if test="조건식"&gt;)</h3>
	 <pre>
	 - JAVA의 단일 if문과 비슷한 역할을 하는 태그
	 - 조건식은 test라는 속성에 작성, 반드시 EL 표현식으로 작성해야 한다.
	 </pre>
	 
	 <c:if test="${num1 gt num2 }">
	 	<b>num1이 num2보다 큽니다.</b>
	 </c:if>
	 
 	 <c:if test="${num1 lt num2 }">
 		<b>num1이 num2보다 작습니다.</b>
	 </c:if>
	 
	 <br>
	 
	 <c:set var="str" value="안녕하세요"/>
	 <c:if test="${str eq '안녕하세요' }">
	 	<mark>hello</mark>
	 </c:if>
 	 <c:if test="${str ne '안녕하세요' }">
	 	<mark>hello world</mark>
	 </c:if>
	 <br>
	 
	 <h3> 3. 조건문 - choose($lt;c:choose&gt;, &lt;c:when&gt; , &lt;c:otherwise&gt;)</h3>
	 <pre>
	 	- JAVA의 if-else, if-else if문 또는 switch문과 비슷한 역할을 하는 태그
	 	- 각 조건들을 c:choose의 하위요소로 c:when을 통해서 작성한다.
	 </pre>
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
</body>
</html>