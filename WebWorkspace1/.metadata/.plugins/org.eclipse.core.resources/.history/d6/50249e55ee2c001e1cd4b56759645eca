<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8" import="java.util.ArrayList, com.kh.model.vo.Person"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %> <!-- taglib 항상 최상단에 선언 -->
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h1>JSTL Core Library</h1>
	
	<h3>1. 변수(속성)</h3>
	<pre>
		* 변수 선언(&lt;c:set var="변수명" value="리터럴" scope="스코프영역지정(생략가능)" &gt;)
		-변수를 선언하고 초기값을 대입해주는 기능 제공
		-해당 변수를 어떤 scope에 담아둘지 지정 가능(생략시 pageScope)
		=> 즉, 해당 scope 영역에 setAttribute라는 메서드를 이용해서 key+value로 담아놓는 것과 같음
		=> c:set을 통해 선언된 변수는 EL로 접근해서 사용 가능(단, 스크립팅 원소는 접근 불가)
		
		* 주의사항
		-변수는 타입(자료형)을 별도로 지정하지 않음
		-반드시 해당 변수의 담아두고자 하는 초기값 속성을 무조건 셋팅해줘야 함
		<!-- core library 사용하려면 EL 필수 -->
	</pre>
	
	<c:set var="num1" value="10" /> <!-- page scope에 저장 -->
	<c:set var="num2" value="20" scope="request"/>
	
	num1의 변수값 : ${num1 } <br>
					<%-- <%=num1 %> - 에러(사용불가) --%>
	num2의 변수값 : ${num2 } <br>
	
	<c:set var="result" value="${num1+num2 }" scope="session"/>
	result 변수값 : ${result } <br>
	
	<!-- 
		변수명만 지정하여 제시하면 공유범위가 가장 작은 스코프부터 값을 찾음
	 -->
	 ${num1 }<br>
	 ${pageScope.num1 }<br>
	 ${num2 }<br>
	 ${requestScope.num2 }<br>
	 ${sessionScope.result }<br>
	 
	 <c:set var="result" scope="request">
	 	9999
	 </c:set>
	 
	 ${result } <br>
	 
	 <hr>
	 
	 <pre>
	 	* 변수 삭제 (&gt;c:remove var="제거할 변수명" scope="스코프영역지정(생략가능)" &gt;)
	 	-해당 변수를 scope에서 찾아서 제거하는 태그
	 	-scope 지정 생략시 모든 scope에서 해당 변수를 다 찾아서 제거
	 	=> 해당 scope에 .removeAttribute를 사용해서 제거하는 것과 동일
	 </pre>
	 
	 삭제전 result : ${result } <br><br>
	 
	 1) 특정 scope를 지정해서 삭제 <br>
	 <c:remove var="result" scope="request"/>
	<%--  request에서 삭제후 result : ${result } <br><br> --%> <%-- session에는 남아있어 session의 result 출력 --%>
	 
	 2) 모든 scope에서 삭제 <br>
	 <c:remove var="result"/>
	 삭제후 result : ${result }
	 
	 <pre>
	 	* 변수 출력 (&lt;c:out value="출력하려는 값" default="기본값(생략가능)" escapeXml="true(기본값, 생략가능)"&gt;)
       - 데이터를 출력하고자 할 때 사용하는 태그
       - 기본값 : value에 출력하고자 하는 값이 없을 경우 대체문구 추가(생략가능)
       - escapeXml : 태그로써 해석해서 출력할지 여부(생략가능, 생략시 true가 기본값) ☆
       - xml을 무시하는게 기본값 (태그로 출력하고자 한다면 false로 설정 필요)
	 </pre>
	 result : <c:out value="${result }"/> <br>
	 default를 설정한 result : <c:out value="${result }" default="없어요"/><br><br>
	 <!-- escpeXml 테스트  -->
	 <c:set var="outTest" value="<b>출력테스트</b>"/>
	 <c:out value="${outTest }"/><!-- escpeXml 생략시 기본값이 true == 태그로서 해석이 안된다.-->
	 <c:out value="${outTest }" escapeXml="false"/><br>
	 
	 <hr>
	 
	 <h3>2. 조건문 - if (&lt;c:if test="조건식"&gt;)</h3>
	 <pre>
	 - JAVA의 단일 if문과 비슷한 역할을 하는 태그
	 - 조건식은 test라는 속성에 작성, 반드시 EL 표현식으로 작성해야 한다.
	 </pre>
	 
	 <c:if test="${num1 gt num2 }">
	 	<b>num1이 num2보다 큽니다.</b>
	 </c:if>
	 
 	 <c:if test="${num1 lt num2 }">
 		<b>num1이 num2보다 작습니다.</b>
	 </c:if>
	 
	 <br>
	 
	 <c:set var="str" value="안녕하세요"/>
	 <c:if test="${str eq '안녕하세요' }">
	 	<mark>hello</mark>
	 </c:if>
 	 <c:if test="${str ne '안녕하세요' }">
	 	<mark>hello world</mark>
	 </c:if>
	 <br>
	 
	 <h3> 3. 조건문 - choose($lt;c:choose&gt;, &lt;c:when&gt; , &lt;c:otherwise&gt;)</h3>
	 <pre>
	 	- JAVA의 if-else, if-else if문 또는 switch문과 비슷한 역할을 하는 태그
	 	- 각 조건들을 c:choose의 하위요소로 c:when을 통해서 작성한다.
	 </pre>
	 <c:choose>
	 	<c:when test="${num1 eq 20}"><!-- if -->
	 		<b>처음 뵙겠습니다</b>
	 	</c:when>
	 	<c:when test="${num1 eq 10}"><!-- else if -->
	 		<b>다시 봐서 반갑습니다</b>
	 	</c:when>
	 	<c:otherwise> <!-- else -->
	 		<b>안녕히가세요</b>
	 	</c:otherwise>
	 </c:choose>
	 
	 <h3>4. 반복문 - forEach</h3>
	 <pre>
	 	for loop문 - (&lt;c:forEach var='변수명' begin='초기값' end='종료값' step='증가값(생략가능)'; &gt;)
	 	향상된 for문 - (&lt;c:forEach var='변수명' items="순차적으로 접근할 배열 또는 컬렉션" varStatus="현재 접근된 요소의 상태값을 보관할 변수명(생략가능)"&gt;)
	 	=> step : 지정하지 않을 시 기본 값 1
	 	=> varStatus : 현재 접근된 요소의 상태값을 보관할 변수명(생략가능)
	 </pre>
	 
	 <!-- for loop문 -->
	 <%
	 	for(int i = 0; i<10; i++){
	 		
	 	}
	 %>
	 <c:forEach var="i" begin="1" end='10'>
	 	반복확인 : ${i }<br>
	 </c:forEach>
	 <c:forEach var="i" begin="1" end='10' step="2">
	 	반복확인 : ${i }<br>
	 </c:forEach>
	 <c:forEach var="i" begin="1" end='6'>
	 	<h${i }> 태그안에 el표현식 사용 </h${i }>
	 </c:forEach>
	 <br>
	 
	 <!-- 향상된 for 문 -->
	 <c:set var="colors">
	 	red, yellow, green, pink
	 </c:set>
	 
	 colors 값 : ${colors }<br>
	 <ul>
	 	<c:forEach var="c" items="${colors }">
	 		<li style="color:${c}">${c }</li>
	 	</c:forEach>
	 </ul>
	 
	 <%
	 	ArrayList<Person> list = new ArrayList();
	 	list.add(new Person("홍길동",19,"남자"));
	 	list.add(new Person("오창정",50,"여자"));
	 	list.add(new Person("이준호",12,"중성"));
	 	
	 	request.setAttribute("list", list); // 여기까지가 원래 servlet에서 작성해야했을 코드들
	 %>
	 <table border="1">
	 
	 	<thead>
	 		<tr>
	 			<th>순번</th>
	 			<th>이름</th>
	 			<th>나이</th>
	 			<th>성별</th>
	 		</tr>
	 	</thead>
	 	<tbody>
	 		<% if %>
	 	</tbody>
	 
	 
	 </table>
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
</body>
</html>