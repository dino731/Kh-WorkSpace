<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- 
		root-context.xml
		서버구동과 동시에 web-xml 파일을 거쳐서 바로 로딩되는 문서 (web-xml이 제일 먼저 실행됨)
		- 보통 서버 구동과 동시에 세팅해야하는 내용들을 작성한다.
	 -->
	 <!-- 
	 	프로퍼티즈 파일을 읽어와서 key, value형태로 얻어올 수 있음.
	  -->
	<context:property-placeholder location="classpath:datasource.properties"/>
	<!-- DB연결 설정 -->
	<!-- 1단계) DB연결을 위한 도구 설정-->
	<bean class="org.apache.commons.dbcp.BasicDataSource" id="realDataSource" destroy-method="close">
		<property name="driverClassName" value="${datasource.driverClassName}"/>
		<property name="url" value="${datasource.url}"/>
		<property name="username" value="${datasource.username}"/>
		<property name="password" value="${datasource.password}
	</bean>
	
	 <!-- 위 Datasource빈을 이용해서 proxyDataSource 생성 -->
    <bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
       <constructor-arg ref="realDataSource"/>
       <property name="logFormatter">
          <bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
             <property name="loggingType" value="MULTI_LINE"/>
             <property name="sqlPrefix" value="[SQL]"/>
          </bean>
       </property>
    </bean>
		
	<!-- 
		BasicDataSource dataSource = new BasicDataSource();
		dataSource.setDriverClassName("oracle.jdbc.driver.oracleDriver");
		dataSource.setUrl("jdbc:oracle:thin:@localhost:1521:xe");
		...
	 -->
	 
	<!-- 2단계 ) MyBatis Spring에서 제공하는 sql명령어 실행을 위한 도구 등록 -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
		<!-- myBatis 설정 파일의 위치를 지정 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<!-- DB연결을 위한 도구 등록  
			name="dataSource" ref="dataSource"
			ref는 위에서 선언한 dataSource 빈 객체를 의미한다.
		-->
		<property name="dataSource" ref="dataSource"/>
		
		<!-- 매퍼 등록
			앞으로 생성할 모든 mapper파일을 한번에 읽어오는 구문.
			classPath : target/classes를 의미한다. 소스 폴더에 있는 모든 파일들은 target안으로 자동 빌드된다.
		 -->
		<property name="mapperLocations" value="classpath*:mapper/**/*.xml"/>
	</bean>
	
	<!-- 3단계 ) SQL구문 실행을 위한 템플릿을 제공하는 도구 등록 
				SqlSessionTemplate : SqlSession인터페이스를 구현한 클래스,
				여러 DAO에서 공유하면서 사용할 예정
	-->
	<bean class="org.mybatis.spring.SqlSessionTemplate" id="sqlSession">
		<constructor-arg ref="sqlSessionFactory"/>
	</bean>
	<!-- ============================== DB연결 끝 ============================== -->	
	
	<!-- ========================== intercepter 시작 =============================== -->
	<!-- 
		Interceptor : 디스패쳐 서블릿에서 컨트롤러에 요청을 전달 할 때 전/후로 나눠서 해당 인터셉터가 중간에 요청을 가로채게 된다.
					  스프링의 모든 빈 객체에 접근이 가능하며 일반적으로 로그인 체크, 권한 체크, 프로그램 실행시간 체크, 로그인 확인시 사용하게 된다.
	 -->
	 <mvc:interceptors>
	 	<mvc:interceptor>
	 		<mvc:mapping path="/**"/>
	 		<bean class="com.kh.spring.common.interceptor.LoggingInterceptor"/>
	 	</mvc:interceptor>
	 </mvc:interceptors>
	
	<!-- ========================== intercepter 끝 =============================== -->
	<!-- 
		스프링 요청/응답 흐름
		요청 -> Filter -> DispatcherServlet(HandlerMapping) -> Interceptor -> Controller -> Service -> DAO 
																										| DB
		응답 <- FIlter <- DispatcherServlet(HandlerMapping) <- Interceptor <- Controller <- Service <- DAO 
	 -->
		
		
</beans>
