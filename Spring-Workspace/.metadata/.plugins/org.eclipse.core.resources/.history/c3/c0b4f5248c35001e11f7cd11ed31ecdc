package com.kh.spring.board.controller;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ResourceLoader;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.multipart.MultipartFile;

import com.kh.spring.board.medel.service.BoardService;
import com.kh.spring.board.medel.vo.Attachment;
import com.kh.spring.board.medel.vo.Board;
import com.kh.spring.board.medel.vo.BoardExt;
import com.kh.spring.common.Utils;
import com.kh.spring.common.template.Pagination;
import com.kh.spring.common.vo.PageInfo;
import com.kh.spring.member.model.vo.Member;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/board")//공통주소
// 현재 컨트롤러 호출시 /spring/board의 경로로 들어오는 모든 url요청을 받아준다.
@SessionAttributes({"loginUser"})
public class BoardController {
	
	@Autowired
	private BoardService boardService;
	
	@Autowired
	private ServletContext application;
	
	@Autowired
	private ResourceLoader resourceLoader;
	
	
	@GetMapping("/list/{boardCode}") // 이렇게쓰면 내부에서도 사용할 수 있다.
	public String selectList(
			@PathVariable("boardCode") String boardCode,
			//@PathVariable ("key") : URL경로에 포함되어있는 값을 변수로 사용할 수 있게 해주는 어노테이션
			//						 + 자동으로 requestscope에 저장된다
			@RequestParam(value="currentPage", defaultValue="1" ) int currentPage, Model model,
			@RequestParam Map<String , Object> paramMap
			){
		//검색 기능 추가
		
		//페이징바
		//게시글 목록

		log.info("paramMap={}",paramMap);
		paramMap.put("boardCode", boardCode);
		
		List<Board> list = boardService.selectList(currentPage, paramMap);
		
		//총 게시글 갯수
		int total = boardService.selectListCount(paramMap);
		int pageLimit = 10;
		int boardLimit = 5;
		
		PageInfo pi = Pagination.getPageInfo(total, currentPage, pageLimit, boardLimit);
		
		model.addAttribute("param",paramMap);
		model.addAttribute("list",list);
		model.addAttribute("pi",pi);
		
		
		return "board/boardListView";
		
	}
	@GetMapping("/insert/{boardCode}")
	public String enrollBoard(
				@PathVariable("boardCode") String boardCode,
				Model model
			) {
		
		return "board/boardEnrollForm";
	}
	
	@PostMapping("insert/{boardCode}")
	public String insertBoard(
			Board b,
			@RequestParam(value="upfile", required=false)List<MultipartFile> upfiles,
			@PathVariable("boardCode")String boardCode,
			HttpSession session,
			Model model,
			@ModelAttribute("loginUser") Member loginUser
			) {
		// 이미지, 파일을 저장할 저장 경로 얻어오기
		log.info("board{}",b);
		// /resources/images/board/{boardCode}/
		String webPath="/resources/images/board/"+boardCode+"/";
		String severFolderPath = application.getRealPath(webPath);
		
		// Board 객체에 데이터 추가 (boardCode, boardWriter)
		b.setBoardWriter(loginUser.getUserNo()+"");
		b.setBoardCd(boardCode);
		
		//디렉토리생성
		File dir = new File(severFolderPath);
		if(!dir.exists()) {
			dir.mkdirs();
		}
		// 첨부파일 같은 경우 선택하고 안하고 상관없이 객체는 생성이 된다. 단, 길이가 0일 수 있다.
		// 전달된 파일이 있는 경우 해당 파일을 웹서버에 저장하고 ,Attachment테이블에 해당 정보를 등록
		// 없는 경우 위프로세스를 패스할 것.
		List <Attachment> attachList = new ArrayList();
		for(MultipartFile upfile   : upfiles) {
			// input[name=upFile]로 만들어두면 비어있는 file이 넘어올 수 있다.
			if(upfile.isEmpty())continue;
			
			// 1. 파일명 재정의 해주는 함수
			String changeName = Utils.saveFile(upfile, severFolderPath);
			Attachment at = new Attachment();
			at.setChangeName(changeName);
			at.setOriginName(upfile.getOriginalFilename());
			attachList.add(at);
		}
		
		int result = 0;
		try {
			result = boardService.insertBaord(b, attachList, severFolderPath, webPath);
		} catch (Exception e) {
			/* e.printStackTrace(); */
			log.error("error : {}",e);
		}
		
		if(result >0) {
			session.setAttribute("alertMsg", "게시글 작성에 성공하셨습니다.");
			return "redirect:/board/list/"+boardCode;
		}else {
			model.addAttribute("errorMsg","게시글 작성 실패");
			return "common/errorPage";
		}
	}
	
	@GetMapping("/detail/{boardCode}/{boardNo}")
	public String selectBoard( 
			@PathVariable("boardCode")String boardCode,
			@PathVariable("boardNo") int boardNo,
			HttpSession session,
			Model model,
			HttpServletRequest req,
			HttpServletResponse res
			@ModelAttribute("loginUser")Member loginUser
			) {
		// 게시판 정보 조회
		// Board b = service. 조회
		// List<attachment>	list = service. 조회 두 과정을 합쳐서 한번에 조회
		BoardExt board = boardService.selectBoard(boardNo);
		// 상세 조회 성공시 쿠키를 이용해서 조회수가 중복으로 증가되지 않도록 방지 + 본인의 글은 애초에 조회수 증가되지 않게 설정
		
		String url="";
		//성공시
		model.addAttribute("board", board);
		url = "board/boardDetailView";
		
		// 실패시
//		url = "common/errorPage";
		
		return url;
				
	}
	
	
	
	
	

}
