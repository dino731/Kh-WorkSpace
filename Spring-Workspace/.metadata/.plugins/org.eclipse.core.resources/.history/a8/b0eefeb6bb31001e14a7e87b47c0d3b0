<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- 
		log4j
		프로그램 작동시 로그를 남기기 위한 자바 기반 오픈소스 로깅 라이브러리
		로그의 레벨을 지정하여 지정한 레벨 이상의 로그 정보만 기록하는 방식.
		System.out.printXX문 보다 속도 및 성능면에 최적화 되어 있음
		
		log로 변수를 출력하는게 중요하다 현업에 들어가면 이걸 안쓰면 혼날 수도 있음 - mkm
	 -->
	 
	<!-- Appenders -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
	<!-- 
		ConsoleAppender : 콘솔창에 로그 정보를 출력하는 클래스
		FileAppender 	: 파일에 로그 정보를 출력하는 클래스 (직접 추가 해야 된다)
	 -->
	 	<param name="threshold" value="INFO"/> <!-- 현재 ConsoleAppender에 대한 로그 레벨 기본 값 -->
	 	
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<!-- <param name="ConversionPattern" value="%-5p: %c - %m%n" /> -->
			<!-- p = 우선순위, C = 에러가 발생한 클래스 %n = 내가 전달하고자하는 메세지 혹은 값, %n은 개행을 뜻한다. -->
			 <param name="ConversionPattern" value="%-5p:[%d{HH:mm:ss.SSS}] %C{1}.%M(%F:%L) - %m%n" />
		</layout>
	</appender>
	<!-- 
		%c %C : 클래스 명을 표시 한다.
				%C{1}의 경우
				클래스 명이 com.kh.spring.LogTest일 때 LogTest의미
				%C{2}의 경우
				클래스 명이 com.kh.spring.LogTest일 때 spring.LogTest의미
		%d	: 로그 시간을 출력 -> java.text.SimpleDateformat과 동일한 출력 패턴을 사용한다.
		%M	: 로그를 수행한 메소드 명
		%m	: 로그로 전달된 메세지. (핵심)
		%n	: 개행 문자
		%F	: 파일 명을 출력한다.
		%L	: 라인 번호를 출력한다.
		%p	: 로그 이벤트 명
		
		- 그 외 -
		%l 	: 로깅이 발생한 위치 정보 - 링크를 제공한다.
		%t	: 로그 이벤트가 발생한 쓰레드 명
		%%	: %를 출력하기 위해 사용
		%r	: 어플리케이션이 시작된 이후 로깅이 발생한 시점까지의 시간 (miliseconds)
	 -->
	 
	 <!-- 
	 	DailyRollingFileAppender ?
	 		일정기간 단위로 로그 파일을 생성하고 기록하도록 도와주는 클래스
	  -->
	  <appender name="dailylog" class="org.apache.log4j.dailyRollingFileAppender">
	 	<param name="threshold" value="INFO"/>
	 	<param name="append" value="true"/>
	 	<!-- 파일 이어쓰기 여부 (ture - 이어쓰기 / false - 새로쓰기) --> 
	 	<param name="file" value="${catalina.base}/logs/kh.Log"/>
	 	<!-- 파일을 생성할 위치 -->
	 	<param name="datePattern" value=".yyyyMMdd"/>
	 	<!-- 
	 		기본 값 : 매일 자정에 로그 파일을 바꿔주는 패턴.
	 		그 외 : yyyyMM => 매달 바꿔주는 패턴.
	 			   yyyyww => 매주 바꿔주는 패턴.
	 			   yyyyMMdd a => 자정과, 정오에 로그 파일을 바꿔주는 명령어
	 			   그 외 시간, 분 단위로도 설정이 가능하다.
	 	 -->
	 	<layout class="org.apache.log4j.PatternLayout">
			<!-- <param name="ConversionPattern" value="%-5p: %c - %m%n" /> -->
			<!-- p = 우선순위, C = 에러가 발생한 클래스 %n = 내가 전달하고자하는 메세지 혹은 값, %n은 개행을 뜻한다. -->
			 <param name="ConversionPattern" value="%-5p:[%d{HH:mm:ss.SSS}] %C{1}.%M(%F:%L) - %m%n" />
		</layout>
	  </appender>
	
	<!-- Application Loggers -->
	<logger name="com.kh.spring">
		<level value="debug" />
	</logger>
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>

	<!-- Root Logger -->
	<root>
		<priority value="warn" />
		<appender-ref ref="console" />
		<appender-ref ref="dailyLog"/>
	</root>
	
</log4j:configuration>
