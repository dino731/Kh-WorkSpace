package com.kh.spring.board.controller;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.multipart.MultipartFile;

import com.kh.spring.board.medel.service.BoardService;
import com.kh.spring.board.medel.vo.Attachment;
import com.kh.spring.board.medel.vo.Board;
import com.kh.spring.board.medel.vo.BoardExt;
import com.kh.spring.common.Utils;
import com.kh.spring.common.template.Pagination;
import com.kh.spring.common.vo.PageInfo;
import com.kh.spring.member.model.vo.Member;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/board")//공통주소
// 현재 컨트롤러 호출시 /spring/board의 경로로 들어오는 모든 url요청을 받아준다.
@SessionAttributes({"loginUser"})
public class BoardController {
	
	@Autowired
	private BoardService boardService;
	
	@Autowired
	private ServletContext application;
	
	@Autowired
	private ResourceLoader resourceLoader;
	
	
	@GetMapping("/list/{boardCode}") // 이렇게쓰면 내부에서도 사용할 수 있다.
	public String selectList(
			@PathVariable("boardCode") String boardCode,
			//@PathVariable ("key") : URL경로에 포함되어있는 값을 변수로 사용할 수 있게 해주는 어노테이션
			//						 + 자동으로 requestscope에 저장된다
			@RequestParam(value="currentPage", defaultValue="1" ) int currentPage, Model model,
			@RequestParam Map<String , Object> paramMap
			){
		//검색 기능 추가
		
		//페이징바
		//게시글 목록

		log.info("paramMap={}",paramMap);
		paramMap.put("boardCode", boardCode);
		
		List<Board> list = boardService.selectList(currentPage, paramMap);
		
		//총 게시글 갯수
		int total = boardService.selectListCount(paramMap);
		int pageLimit = 10;
		int boardLimit = 5;
		
		PageInfo pi = Pagination.getPageInfo(total, currentPage, pageLimit, boardLimit);
		
		model.addAttribute("param",paramMap);
		model.addAttribute("list",list);
		model.addAttribute("pi",pi);
		
		
		return "board/boardListView";
		
	}
	@GetMapping("/update/{boardCode}/{boardNo}")
	public String updateFormBoard(
			@PathVariable("boardCode") String boardCode,
			@PathVariable("boardNo") int boardNo,
			Model model
			) {
		BoardExt board = boardService.selectBoard(boardNo);
		model.addAttribute("board",board);
		
		return "board/boardUpdateForm";
	}
	
	@GetMapping("/insert/{boardCode}")
	public String enrollBoard(
				@PathVariable("boardCode") String boardCode,
				Model model
			) {
		
		return "board/boardEnrollForm";
	}
	
	@PostMapping("insert/{boardCode}")
	public String insertBoard(
			Board b,
			@RequestParam(value="upfile", required=false)List<MultipartFile> upfiles,
			@PathVariable("boardCode")String boardCode,
			HttpSession session,
			Model model,
			@ModelAttribute("loginUser") Member loginUser
			) {
		// 이미지, 파일을 저장할 저장 경로 얻어오기
		log.info("board{}",b);
		// /resources/images/board/{boardCode}/
		String webPath="/resources/images/board/"+boardCode+"/";
		String severFolderPath = application.getRealPath(webPath);
		
		// Board 객체에 데이터 추가 (boardCode, boardWriter)
		b.setBoardWriter(loginUser.getUserNo()+"");
		b.setBoardCd(boardCode);
		
		//디렉토리생성
		File dir = new File(severFolderPath);
		if(!dir.exists()) {
			dir.mkdirs();
		}
		// 첨부파일 같은 경우 선택하고 안하고 상관없이 객체는 생성이 된다. 단, 길이가 0일 수 있다.
		// 전달된 파일이 있는 경우 해당 파일을 웹서버에 저장하고 ,Attachment테이블에 해당 정보를 등록
		// 없는 경우 위프로세스를 패스할 것.
		List <Attachment> attachList = new ArrayList();
		for(MultipartFile upfile   : upfiles) {
			// input[name=upFile]로 만들어두면 비어있는 file이 넘어올 수 있다.
			if(upfile.isEmpty())continue;
			
			// 1. 파일명 재정의 해주는 함수
			String changeName = Utils.saveFile(upfile, severFolderPath);
			Attachment at = new Attachment();
			at.setChangeName(changeName);
			at.setOriginName(upfile.getOriginalFilename());
			attachList.add(at);
		}
		
		int result = 0;
		try {
			result = boardService.insertBaord(b, attachList, severFolderPath, webPath);
		} catch (Exception e) {
			/* e.printStackTrace(); */
			log.error("error : {}",e);
		}
		
		if(result >0) {
			session.setAttribute("alertMsg", "게시글 작성에 성공하셨습니다.");
			return "redirect:/board/list/"+boardCode;
		}else {
			model.addAttribute("errorMsg","게시글 작성 실패");
			return "common/errorPage";
		}
	}
	
	@GetMapping("/detail/{boardCode}/{boardNo}")
	public String selectBoard( 
			@PathVariable("boardCode")String boardCode,
			@PathVariable("boardNo") int boardNo,
			HttpSession session,
			Model model,
			HttpServletRequest req,
			HttpServletResponse res
//			@ModelAttribute("loginUser")Member loginUser
			) {
		// 게시판 정보 조회
		// Board b = service. 조회
		// List<attachment>	list = service. 조회 두 과정을 합쳐서 한번에 조회
		BoardExt board = boardService.selectBoard(boardNo);
		String url="";
		
		model.addAttribute("board", board);
		url = "board/boardDetailView";
		
		// 상세 조회 성공시 쿠키를 이용해서 조회수가 중복으로 증가되지 않도록 방지 + 본인의 글은 애초에 조회수 증가되지 않게 설정
		if(board != null) {
//			int userNo = 0;
			String userId = "";
			Member loginUser = (Member) session.getAttribute("loginUser");
			if(loginUser != null) {
				userId = loginUser.getUserId();
			}
			// 게시글의 작성자 아이디와, 현재 세션의 접속중인 아이디가 같지 않은 경우에마 조회수 증가
			if(!board.getBoardWriter().equals(userId)){
				// 쿠기
				Cookie cookie = null;
				Cookie[] cArr = req.getCookies(); // 사용자의 쿠키정보 얻어오기
				
				if(cArr != null && cArr.length > 0) {
					for(Cookie c : cArr) {
						if(c.getName().equals("readBoardNo")) {
							cookie = c;
							break;
						}
					}
				}
				int result = 0;
				if(cookie == null) { // 원래 readBoardNo라는 이름의 쿠키가 없는 케이스
					// 쿠키 생성
					cookie = new Cookie("readBoardNo", boardNo+ ""); // 게시글 작성자와 현재 세션에 저장된 작성자 정보가 일치하지 않고, 쿠키도 없다
					// 조회수 증가 서비스 호출
					result = boardService.increaseCount(boardNo);
					
				}else { // 존재 했던 케이스
					// 쿠키에 저장된 값 중에 현재 조회된 게시글 번호(boardNo)를 추가
					// 단, 기존 쿠키값에 중복되는 번호가 없는 경우에만 추가 => 조회수 증가와 함께
					String[] arr = cookie.getValue().split("/");
					//cookie.getValue().indexOf() // 이렇게 indexOf를 이용하여 사용할 수는 있다.
					
					// "reacBoardNo" : "1/2/5/10/135" ==> ["1","2","5","10","135"]
					
					// 컬렉션으로 변환 => indexOf를 사용하기 위해서
					// List.indexOf() : list안에서 매개 변수로 들어온 obj와 일치(equals)하는 부분의 인덱스를 반환
					//					일치하는 값이 엇ㅂ는 경우 -1 반환
					List<String> list = Arrays.asList(arr);
					if(list.indexOf(boardNo+"")== -1) { // 기존 쿠키값에 현재 게시글 번호화 일치하는 값이 없는 경우 (처음 들어온 글)
						// 단, 기존 쿠키값에 중복되는 번호가 없는 경우에만 추가 => 조회수 증가와 함께
						cookie.setValue(cookie.getValue()+"/"+boardNo);
						result = boardService.increaseCount(boardNo);
					}
				}
				if(result >0) { // 성공적으로 조회수 증가함^^
					board.setCount(board.getCount()+1);
					
					cookie.setPath(req.getContextPath());
					cookie.setMaxAge(60*60*1); // 1시간만 유지
					res.addCookie(cookie);
				}
			}
		}else {
			model.addAttribute("errorMsg","게시글 조회 실패..");
			url ="common/errorPage";
		}
		return url;
				
	}
	
	
	/* 어제 마지막에 뭐 만드는 수업을 안들어서 넣어줘야함!!!!!*/
	
	@GetMapping("/fileDownload/{fileNo}")
	public ResponseEntity<Resource> fileDownload(
			@PathVariable("fileNo") int fileNo
			)throws UnsupportedEncodingException{
		ResponseEntity<Resource> responseEntity = null;
		// db 에서 Attachment에서 fileNo 매개변수로 전달 받은 fileNo와 일치하는 행 조회
		Attachment at = boardService.selectAttachment(fileNo);
		log.info("at ==={]", at);
		
		if(at == null) {
			return responseEntity.notFound().build(); // stats code 404
		}
		// 2. Resource 객체 얻어오기
		String saveDirector = application.getRealPath(at.getFilePath());
		File downFile = new File (saveDirector, at.getChangeName());
		Resource resource = resourceLoader.getResource("file:"+downFile);
		// getResource : 파일의 위치, 내용을 읽어올 수 있음
		String filename = new String(at.getOriginName().getBytes("utf-8"),"iso-8859-1");
		// 한글깨짐 방지처리(utf-8로 전달시 한글이 깨질 수 있다.
		
		// 3. responseEntity객체 생성 및 리턴,
		responseEntity = ResponseEntity
							.ok()
							// 컨텐츠 타입 ; ex) html, json.xml .. 내가 넘겨주고자 하는 데이터가 바이너리 형식의 데이터임을 의미
							.header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_OCTET_STREAM_VALUE)
							// attachment -> 파일을 첨부파일 형태로 처리하겠다(다운로드)
							.header(HttpHeaders.CONTENT_DISPOSITION,"attachment;filename="+filename)
							.body(resource);
		
		
		return responseEntity;
	}


}
