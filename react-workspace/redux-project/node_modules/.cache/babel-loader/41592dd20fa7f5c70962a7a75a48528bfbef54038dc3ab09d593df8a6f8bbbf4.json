{"ast":null,"code":"var _jsxFileName = \"C:\\\\react-workspace\\\\redux-project\\\\src\\\\01_Redux.js\";\n/* \r\n  Redux?\r\n  state같은 경우 각 컴포넌트의 상태를 관리했다면, Redux는 전체적인 애플리케이션의 상태를 관리하는 \r\n  패키지로 모든 컴포넌트에서 공유하는 앱 상태(state)를 다룰 수 있다.\r\n  \r\n  리덕스 구성요소 : 저장소(store), 액션(action), 리듀서(reducers), [미들웨어(middleware)]\r\n  \r\n  저장소 : 앱의 상태를 저장하는 저장소. 애플리케이션당 한개만 존재하며 \r\n            configureStore()에 의해 생성되면서 리듀서와 결합함.\r\n            useSelector(state) 훅을 통해 저장소의 상태(state)를 가져올 수 있다.\r\n  액션   : 개발자가 만드는 객체로 , userDispatch훅을 통해 저장소르 action을 전달\r\n  리듀서 : 현재 앱상태(oldstate)와 액션개체 2가지를 매개변수로 입력받는 함수로, \r\n           상태값 + 액션을 결합하여 새로운 상태(newState)를 저장소로 전달해준다.\r\n  미들웨어 : 액션을 dispatch함수로 전달하고, 리듀서가 실행되기 전과, 실행된 후 처리되는 기능 (필수는 아닙니돠 mkm)\r\n*/\nimport { configureStore } from '@reduxjs/toolkit';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport Clock from './Clock';\nimport CallMiddleware from './CallMiddleware';\n\n// 타이머 (시계앱)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialAppState = {\n  today: new Date()\n};\n/* \r\n   첫 번째 매개변수 Appstate의 초기 값은 initialAppstate로 셋팅\r\n   두 번째 매개변수 action은 내부의 값중 속성명(type)이 반드시 있어야만하는 객체\r\n\r\n   action에 type속성을 반드시 추가하는 이유는 리듀서 함수의 몸통에서 switch문으로 분기처리를 하기 위해서\r\n*/\nconst rootReducer = (state = initialAppState, action) => {\n  switch (action.type) {\n    case 'setToday':\n      return {\n        ...state,\n        today: action.today\n      };\n    case 'action_type2':\n      return {\n        ...state\n      };\n  }\n  return state;\n};\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: [CallMiddleware]\n});\nexport default function ReduxApp() {\n  return /*#__PURE__*/_jsxDEV(ReduxProvider, {\n    store: store,\n    children: /*#__PURE__*/_jsxDEV(Clock, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_c = ReduxApp;\nvar _c;\n$RefreshReg$(_c, \"ReduxApp\");","map":{"version":3,"names":["configureStore","Provider","ReduxProvider","Clock","CallMiddleware","jsxDEV","_jsxDEV","initialAppState","today","Date","rootReducer","state","action","type","store","reducer","middleware","ReduxApp","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/react-workspace/redux-project/src/01_Redux.js"],"sourcesContent":["/* \r\n  Redux?\r\n  state같은 경우 각 컴포넌트의 상태를 관리했다면, Redux는 전체적인 애플리케이션의 상태를 관리하는 \r\n  패키지로 모든 컴포넌트에서 공유하는 앱 상태(state)를 다룰 수 있다.\r\n  \r\n  리덕스 구성요소 : 저장소(store), 액션(action), 리듀서(reducers), [미들웨어(middleware)]\r\n  \r\n  저장소 : 앱의 상태를 저장하는 저장소. 애플리케이션당 한개만 존재하며 \r\n            configureStore()에 의해 생성되면서 리듀서와 결합함.\r\n            useSelector(state) 훅을 통해 저장소의 상태(state)를 가져올 수 있다.\r\n  액션   : 개발자가 만드는 객체로 , userDispatch훅을 통해 저장소르 action을 전달\r\n  리듀서 : 현재 앱상태(oldstate)와 액션개체 2가지를 매개변수로 입력받는 함수로, \r\n           상태값 + 액션을 결합하여 새로운 상태(newState)를 저장소로 전달해준다.\r\n  미들웨어 : 액션을 dispatch함수로 전달하고, 리듀서가 실행되기 전과, 실행된 후 처리되는 기능 (필수는 아닙니돠 mkm)\r\n*/\r\nimport {configureStore} from '@reduxjs/toolkit';\r\nimport { Provider as ReduxProvider } from 'react-redux';\r\nimport Clock from './Clock';\r\nimport CallMiddleware from './CallMiddleware';\r\n\r\n// 타이머 (시계앱)\r\nconst initialAppState = {today : new Date()};\r\n/* \r\n   첫 번째 매개변수 Appstate의 초기 값은 initialAppstate로 셋팅\r\n   두 번째 매개변수 action은 내부의 값중 속성명(type)이 반드시 있어야만하는 객체\r\n\r\n   action에 type속성을 반드시 추가하는 이유는 리듀서 함수의 몸통에서 switch문으로 분기처리를 하기 위해서\r\n*/\r\nconst rootReducer = (state = initialAppState, action)=>{\r\n  switch(action.type){\r\n    case 'setToday' :\r\n      return {...state, today : action.today};\r\n    case 'action_type2' :\r\n      return {...state};\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nconst store = configureStore({ reducer : rootReducer, middleware:[CallMiddleware] });\r\n\r\nexport default function ReduxApp(){\r\n  return(\r\n    <ReduxProvider store={store}>\r\n      <Clock/>\r\n    </ReduxProvider>\r\n  )\r\n}\r\n\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,cAAc,QAAO,kBAAkB;AAC/C,SAASC,QAAQ,IAAIC,aAAa,QAAQ,aAAa;AACvD,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,cAAc,MAAM,kBAAkB;;AAE7C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,eAAe,GAAG;EAACC,KAAK,EAAG,IAAIC,IAAI,CAAC;AAAC,CAAC;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAGA,CAACC,KAAK,GAAGJ,eAAe,EAAEK,MAAM,KAAG;EACrD,QAAOA,MAAM,CAACC,IAAI;IAChB,KAAK,UAAU;MACb,OAAO;QAAC,GAAGF,KAAK;QAAEH,KAAK,EAAGI,MAAM,CAACJ;MAAK,CAAC;IACzC,KAAK,cAAc;MACjB,OAAO;QAAC,GAAGG;MAAK,CAAC;EACrB;EAEA,OAAOA,KAAK;AACd,CAAC;AAED,MAAMG,KAAK,GAAGd,cAAc,CAAC;EAAEe,OAAO,EAAGL,WAAW;EAAEM,UAAU,EAAC,CAACZ,cAAc;AAAE,CAAC,CAAC;AAEpF,eAAe,SAASa,QAAQA,CAAA,EAAE;EAChC,oBACEX,OAAA,CAACJ,aAAa;IAACY,KAAK,EAAEA,KAAM;IAAAI,QAAA,eAC1BZ,OAAA,CAACH,KAAK;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAEpB;AAACC,EAAA,GANuBN,QAAQ;AAAA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}