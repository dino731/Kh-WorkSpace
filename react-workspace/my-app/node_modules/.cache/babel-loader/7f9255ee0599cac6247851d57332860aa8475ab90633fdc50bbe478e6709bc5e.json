{"ast":null,"code":"var _jsxFileName = \"C:\\\\react-workspace\\\\my-app\\\\src\\\\02_PropsDataType.js\";\nimport datatype from 'prop-types';\nimport { Component } from 'react';\n\n/*  \r\n  prop-types?\r\n  일반적으로 자바스크립트의 유연한 특성은 개발을 하는데 있어 도움을 주지만,\r\n  관리해야할 파일이 많아지면 생산성 및 유지 보수성이 떨어진다라는 단점이 있음.\r\n\r\n  이런점 때문에 명확한 자료형으로 개발을 해야하는 타입스크립트가 각광받고 있는 추세인데\r\n  반드시 자바스크립트로 개발을 해야만 하는 상황에서는 propTypes를 활용해서 해결할 수 있다.\r\n\r\n  PropTypes는 부모로부터 전달받은 props의 데티어틔 type(자료형)을 검사해준다\r\n  자식 컴포넌트에서 명시해 놓은 데이터타입과 부모로부터 넘겨받은 데이터 타입이 일치하지 않으면 콘솔에 경고를 띄워준다.\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass PropsDataType extends Component {\n  render() {\n    let {\n      String,\n      Number,\n      Boolean,\n      Array,\n      Object,\n      Function\n    } = this.props;\n    // 구조분해할당 -> 객체를 변수로 저장하는 ES6방식 문법\n    console.log(this.props);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"0px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"StringProps : \", String]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"NumberProps : \", Number]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this);\n  }\n}\nPropsDataType.Propstypes = {\n  String: datatype.string,\n  Number: datatype.number,\n  Boolean: dataTpe\n};\nexport default PropsDataType;","map":{"version":3,"names":["datatype","Component","jsxDEV","_jsxDEV","PropsDataType","render","String","Number","Boolean","Array","Object","Function","props","console","log","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","Propstypes","string","number","dataTpe"],"sources":["C:/react-workspace/my-app/src/02_PropsDataType.js"],"sourcesContent":["import datatype from 'prop-types';\r\nimport { Component } from 'react';\r\n\r\n\r\n/*  \r\n  prop-types?\r\n  일반적으로 자바스크립트의 유연한 특성은 개발을 하는데 있어 도움을 주지만,\r\n  관리해야할 파일이 많아지면 생산성 및 유지 보수성이 떨어진다라는 단점이 있음.\r\n\r\n  이런점 때문에 명확한 자료형으로 개발을 해야하는 타입스크립트가 각광받고 있는 추세인데\r\n  반드시 자바스크립트로 개발을 해야만 하는 상황에서는 propTypes를 활용해서 해결할 수 있다.\r\n\r\n  PropTypes는 부모로부터 전달받은 props의 데티어틔 type(자료형)을 검사해준다\r\n  자식 컴포넌트에서 명시해 놓은 데이터타입과 부모로부터 넘겨받은 데이터 타입이 일치하지 않으면 콘솔에 경고를 띄워준다.\r\n*/\r\nclass PropsDataType extends Component{\r\n  render(){\r\n      let {String, Number, Boolean, Array, Object, Function} = this.props;\r\n      // 구조분해할당 -> 객체를 변수로 저장하는 ES6방식 문법\r\n      console.log(this.props);\r\n      return(\r\n        <div style={{padding:\"0px\"}}>\r\n          <p>StringProps : {String}</p>\r\n          <p>NumberProps : {Number}</p>\r\n\r\n        </div>\r\n      )\r\n  }\r\n}\r\nPropsDataType.Propstypes={\r\n  String : datatype.string,\r\n  Number : datatype.number,\r\n  Boolean : dataTpe\r\n}\r\nexport default PropsDataType;"],"mappings":";AAAA,OAAOA,QAAQ,MAAM,YAAY;AACjC,SAASC,SAAS,QAAQ,OAAO;;AAGjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA,SAAAC,MAAA,IAAAC,OAAA;AAWA,MAAMC,aAAa,SAASH,SAAS;EACnCI,MAAMA,CAAA,EAAE;IACJ,IAAI;MAACC,MAAM;MAAEC,MAAM;MAAEC,OAAO;MAAEC,KAAK;MAAEC,MAAM;MAAEC;IAAQ,CAAC,GAAG,IAAI,CAACC,KAAK;IACnE;IACAC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,KAAK,CAAC;IACvB,oBACET,OAAA;MAAKY,KAAK,EAAE;QAACC,OAAO,EAAC;MAAK,CAAE;MAAAC,QAAA,gBAC1Bd,OAAA;QAAAc,QAAA,GAAG,gBAAc,EAACX,MAAM;MAAA;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7BlB,OAAA;QAAAc,QAAA,GAAG,gBAAc,EAACV,MAAM;MAAA;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE1B,CAAC;EAEZ;AACF;AACAjB,aAAa,CAACkB,UAAU,GAAC;EACvBhB,MAAM,EAAGN,QAAQ,CAACuB,MAAM;EACxBhB,MAAM,EAAGP,QAAQ,CAACwB,MAAM;EACxBhB,OAAO,EAAGiB;AACZ,CAAC;AACD,eAAerB,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}