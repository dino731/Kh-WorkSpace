{"ast":null,"code":"import datatype from 'prop-types';\n\n/*  \r\n  prop-types?\r\n  일반적으로 자바스크립트의 유연한 특성은 개발을 하는데 있어 도움을 주지만,\r\n  관리해야할 파일이 많아지면 생산성 및 유지 보수성이 떨어진다라는 단점이 있음.\r\n\r\n  이런점 때문에 명확한 자료형으로 개발을 해야하는 타입스크립트가 각광받고 있는 추세인데\r\n  반드시 자바스크립트로 개발을 해야만 하는 상황에서는 propTypes를 활용해서 해결할 수 있다.\r\n\r\n  PropTypes는 부모로부터 전달받은 props의 데티어틔 type(자료형)을 검사해준다\r\n  자식 컴포넌트에서 명시해 놓은 데이터타입과 부모로부터 넘겨받은 데이터 타입이 일치하지 않으면 콘솔에 경고를 띄워준다.\r\n*/\nclass PropsDataType extends Component {\n  render() {\n    console.log(this.props);\n  }\n}\nexport default PropsDataType;","map":{"version":3,"names":["datatype","PropsDataType","Component","render","console","log","props"],"sources":["C:/react-workspace/my-app/src/02_PropsDataType.js"],"sourcesContent":["import datatype from 'prop-types';\r\n\r\n\r\n/*  \r\n  prop-types?\r\n  일반적으로 자바스크립트의 유연한 특성은 개발을 하는데 있어 도움을 주지만,\r\n  관리해야할 파일이 많아지면 생산성 및 유지 보수성이 떨어진다라는 단점이 있음.\r\n\r\n  이런점 때문에 명확한 자료형으로 개발을 해야하는 타입스크립트가 각광받고 있는 추세인데\r\n  반드시 자바스크립트로 개발을 해야만 하는 상황에서는 propTypes를 활용해서 해결할 수 있다.\r\n\r\n  PropTypes는 부모로부터 전달받은 props의 데티어틔 type(자료형)을 검사해준다\r\n  자식 컴포넌트에서 명시해 놓은 데이터타입과 부모로부터 넘겨받은 데이터 타입이 일치하지 않으면 콘솔에 경고를 띄워준다.\r\n*/\r\nclass PropsDataType extends Component{\r\n  render(){\r\n      console.log(this.props);\r\n  }\r\n}\r\nexport default PropsDataType;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,YAAY;;AAGjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,SAASC,SAAS;EACnCC,MAAMA,CAAA,EAAE;IACJC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,KAAK,CAAC;EAC3B;AACF;AACA,eAAeL,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}