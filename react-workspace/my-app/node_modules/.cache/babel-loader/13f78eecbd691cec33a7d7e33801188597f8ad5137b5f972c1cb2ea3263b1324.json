{"ast":null,"code":"var _jsxFileName = \"C:\\\\react-workspace\\\\my-app\\\\src\\\\09_Context.js\",\n  _s = $RefreshSig$();\n/* \r\n    Context?\r\n    기존에 props를 이용하여 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달할 수 있었다\r\n\r\n    단, 해당 데이터를 자식컴포넌트가 아니라 후손 컴포넌트에서만 필요로 하는 데이터라면 자식 컴포넌트에서는 불필요하게 코드를 작성해줘야하는데,\r\n    이때 Context를 사용하면 데이터 공급자와, 소비자를 정의하여 데이터가 필요한 컴포넌트만 사용할 수 있게 구현할 수 있다.\r\n\r\n    컨텍스트를 사용하면 하위 컴포넌트가 여러개인 구조에서 유용하게 사용할 수 있다.\r\n    먼 후손 컴포넌트도 소비자를 임포트해서 필요한 데이터를 쓸 수 있다.\r\n\r\n    props VS Context\r\n    props는 부모 컴포넌트에서 직계 자식 컴포넌트에게만 전달되는 데이터라면,\r\n    Context는 모든 컴포넌트에 전반적으로 영향을 끼칠 수 있다. ( 안쓸 이유가 없겠죵?? MKM)\r\n*/\nimport { useState, createContext } from 'react';\nimport Children from './ContextChildren1';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyContext = /*#__PURE__*/createContext();\nfunction ContextApi() {\n  _s();\n  const [name, setName] = useState('');\n  const setstateFunc = vlaue => {\n    setName(vlaue);\n  };\n  const content = {\n    name,\n    setstateFunc\n  };\n  /* \r\n    자식에게 넘겨줄 데이터에 상태값(name)과 상태값을 변경해줄 수 있는 함수를 넘겨준다. (세번 말씀 드리는 거 같은데 되게되게되게 중요합니다~ MKM)\r\n  */\n  return (\n    /*#__PURE__*/\n    // 자식 태그(Children)를 Provider로 감싸고 전달한 데이터는, vlaue값으로 할당.\n    _jsxDEV(MyContext.Provider, {\n      value: content,\n      children: /*#__PURE__*/_jsxDEV(Children, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(ContextApi, \"/PAWDgWx7+Y6BmsFMUKcdrcX5eM=\");\n_c = ContextApi;\nexport { ContextApi, MyContext };\nvar _c;\n$RefreshReg$(_c, \"ContextApi\");","map":{"version":3,"names":["useState","createContext","Children","jsxDEV","_jsxDEV","MyContext","ContextApi","_s","name","setName","setstateFunc","vlaue","content","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/react-workspace/my-app/src/09_Context.js"],"sourcesContent":["/* \r\n    Context?\r\n    기존에 props를 이용하여 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달할 수 있었다\r\n\r\n    단, 해당 데이터를 자식컴포넌트가 아니라 후손 컴포넌트에서만 필요로 하는 데이터라면 자식 컴포넌트에서는 불필요하게 코드를 작성해줘야하는데,\r\n    이때 Context를 사용하면 데이터 공급자와, 소비자를 정의하여 데이터가 필요한 컴포넌트만 사용할 수 있게 구현할 수 있다.\r\n\r\n    컨텍스트를 사용하면 하위 컴포넌트가 여러개인 구조에서 유용하게 사용할 수 있다.\r\n    먼 후손 컴포넌트도 소비자를 임포트해서 필요한 데이터를 쓸 수 있다.\r\n\r\n    props VS Context\r\n    props는 부모 컴포넌트에서 직계 자식 컴포넌트에게만 전달되는 데이터라면,\r\n    Context는 모든 컴포넌트에 전반적으로 영향을 끼칠 수 있다. ( 안쓸 이유가 없겠죵?? MKM)\r\n*/\r\nimport {useState, createContext} from 'react';\r\nimport Children from './ContextChildren1';\r\n\r\nconst MyContext = createContext();\r\n\r\nfunction ContextApi(){\r\n\r\n  const [name, setName] = useState('');\r\n\r\n  const setstateFunc = (vlaue)=> {\r\n    setName(vlaue);\r\n\r\n  }\r\n\r\n  const content = {\r\n    name,\r\n    setstateFunc\r\n  }\r\n  /* \r\n    자식에게 넘겨줄 데이터에 상태값(name)과 상태값을 변경해줄 수 있는 함수를 넘겨준다. (세번 말씀 드리는 거 같은데 되게되게되게 중요합니다~ MKM)\r\n  */\r\n  return(\r\n    // 자식 태그(Children)를 Provider로 감싸고 전달한 데이터는, vlaue값으로 할당.\r\n    <MyContext.Provider value={content}>\r\n       <Children/>\r\n    </MyContext.Provider>\r\n   \r\n\r\n  )\r\n\r\n}\r\nexport {ContextApi, MyContext};\r\n\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,QAAQ,EAAEC,aAAa,QAAO,OAAO;AAC7C,OAAOC,QAAQ,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,SAAS,gBAAGJ,aAAa,CAAC,CAAC;AAEjC,SAASK,UAAUA,CAAA,EAAE;EAAAC,EAAA;EAEnB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMU,YAAY,GAAIC,KAAK,IAAI;IAC7BF,OAAO,CAACE,KAAK,CAAC;EAEhB,CAAC;EAED,MAAMC,OAAO,GAAG;IACdJ,IAAI;IACJE;EACF,CAAC;EACD;AACF;AACA;EACE;IAAA;IACE;IACAN,OAAA,CAACC,SAAS,CAACQ,QAAQ;MAACC,KAAK,EAAEF,OAAQ;MAAAG,QAAA,eAChCX,OAAA,CAACF,QAAQ;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACM;EAAC;AAKzB;AAACZ,EAAA,CAzBQD,UAAU;AAAAc,EAAA,GAAVd,UAAU;AA0BnB,SAAQA,UAAU,EAAED,SAAS;AAAE,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}