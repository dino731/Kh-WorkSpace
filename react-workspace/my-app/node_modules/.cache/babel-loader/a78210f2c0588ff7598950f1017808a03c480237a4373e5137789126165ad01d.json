{"ast":null,"code":"var _jsxFileName = \"C:\\\\react-workspace\\\\my-app\\\\src\\\\01_Lifecycle.js\";\n/* \r\n  1. react모듈에서 default옵션을 사요해서 component를 export했다면\r\n  import 모듈명 from '모듈경로';\r\n\r\n  2. react모듈에서 default옵션을 지정하지 않고 export했다면\r\n  import{가져올 객체} from '모듈경로';\r\n*/\nimport { Component } from \"react\";\n// 현재 클래스를 Component로 만들기 위해 필요한 클래스\n\n/* \r\n  Component의 생명주기(생성, 변경, 소멸)와 관련된 함수중 \"생성\"과정과 연관된 함수\r\n\r\n  1. render() : return되는 html 형식의 코드를 화면에 그려주는 함수 (랜더링)\r\n                화면에 내용이 변경되어야할 시점에 자동으로 호출됨.\r\n\r\n  2. (props)constructor : 생성자 함수로 생명주기 함수들 중 가장 먼저 실행되며 처음 딱 한번만 실행됨.\r\n                          Component내부에서 사용되는 변수(state)를 선언하고 부모 객체에서 전달받은 변수(props)를 초기화할때 사용된다.\r\n                          super()함수는 생성자 함수 가장위에서 호출함(자바와 동일)\r\n  \r\n  3. getDerviedStatefromProps(props, state) : construtor()함수 호출 다음과, render함수 호출 직전에 실행되는 함수.\r\n                                              컴포넌트가 새로운 props를 받게 됐을때 state값을 변경해줌.\r\n\r\n  4. componentDidMount() : 생성과 관련된 함수들중 가장 '마지막'에 실행됨.\r\n                            화면이 만들어지고 나서 할수있는 작업인 이벤트 부여나, 초기화 작업시 활용되는 메서드\r\n                            \r\n  초기화 시에는 setState()함수를 활용함.\r\n  - setstate() : 현재 컴포넌트의 state값을 변경해주며, state값 변경시 render함수가 자동으로 호출됨.\r\n\r\n  ==================================================================================================================================\r\n\r\n  Component의 생명주기 함수중 '변경'과정과 연관된 함수\r\n\r\n  5. shouldComponentUpdate : props, state가 새로운 값으로 갱신되어서 reder()메서드가 호출되어야 하는 시점을 감지하여서\r\n                          컴포넌트를 업데이트 할지 말지 여부를 결정하는 함수.\r\n  반환값은 true/false로 설정하여서 true값 반환시에는 render메서드를 호출하고,\r\n  false값 반환시에는 render함수를 호출하지 않음.\r\n  주의사항 : 초기 랜더링, 강제 없데이트시에는 호출되지 않는다.\r\n\r\n  @ 6. componentDidUpdate() : 컴포넌트가 실제화면에 출견된 이후에 실행.\r\n  부모 컴포넌트로 부터 전달된 이전 props와 이전 state를 인자로 전달받음\r\n    \r\n  ===================================================================================================================================\r\n  \r\n  소멸 과정과 연관된 함수\r\n  @ 7. componentWillUnmount : 컴포넌트가 제거되기 직전에 수행 (이벤트 제거가 핵심. 리액트에서는 이벤트 제거가 중요하다. 내가 원하지 않은 이벤트가 진행될 수 있기 때문에 지워줘야한다.)\r\n  \r\n  \r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Lifecycle extends Component {\n  static getDerivedStateFromProps(props, state) {\n    console.log(\"2. getDerivedStateFromProps 호출\");\n    console.log(props, state);\n    return {\n      tmp_state: props.props_value\n    };\n  }\n  componentDidMount() {\n    console.log(\"4. componentDidMount() 호출\");\n    this.setState({\n      tmp_state2: true\n    });\n  }\n  shouldComponentUpdate(props, state) {\n    console.log(\"5. shouldComponentupdate 호출 / tmp_state2 = \" + state.tmp_state2);\n    return state.tmp_state2;\n  }\n  constructor(props) {\n    super(props); // props란? 부모 컴포넌트로 부터 전달받은 데이터\n    this.state = {};\n    /* \r\n      state? 컴포넌트 내부에서 전역변수로 저장할 객체\r\n      컴포넌트 내부에서 state에 값을 저장하고 변경하면서 화면을 다시 그려줄 목적으로 사용한다.\r\n      ex) 일반 게시글에서 총 댓글 숫자를 저장하고, 새로운 댓글이 달리면 댓글 숫자를 증가시켜주면서 화면을 랜더링 시킨다.\r\n    */\n    console.log(\"1. constructor()호출\");\n  }\n  render() {\n    console.log(\"3. render함수 호출\");\n    console.log(this.state);\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"render \\uD568\\uC218 \\uD638\\uCD9C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  }\n}\n/* \r\n  작성한 컴포넌트를 내보내는 방법\r\n  1. export default 객체명; \r\n  // default :  현재 모듈안에서 내보내기할 객체가 한개일때 사용\r\n  2. export {클래스(함수),상수,배열,...};\r\n*/\n// export default Lifecycle;\nexport { Lifecycle };","map":{"version":3,"names":["Component","jsxDEV","_jsxDEV","Lifecycle","getDerivedStateFromProps","props","state","console","log","tmp_state","props_value","componentDidMount","setState","tmp_state2","shouldComponentUpdate","constructor","render","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/react-workspace/my-app/src/01_Lifecycle.js"],"sourcesContent":["/* \r\n  1. react모듈에서 default옵션을 사요해서 component를 export했다면\r\n  import 모듈명 from '모듈경로';\r\n\r\n  2. react모듈에서 default옵션을 지정하지 않고 export했다면\r\n  import{가져올 객체} from '모듈경로';\r\n*/\r\nimport { Component } from \"react\"; \r\n// 현재 클래스를 Component로 만들기 위해 필요한 클래스\r\n\r\n/* \r\n  Component의 생명주기(생성, 변경, 소멸)와 관련된 함수중 \"생성\"과정과 연관된 함수\r\n\r\n  1. render() : return되는 html 형식의 코드를 화면에 그려주는 함수 (랜더링)\r\n                화면에 내용이 변경되어야할 시점에 자동으로 호출됨.\r\n\r\n  2. (props)constructor : 생성자 함수로 생명주기 함수들 중 가장 먼저 실행되며 처음 딱 한번만 실행됨.\r\n                          Component내부에서 사용되는 변수(state)를 선언하고 부모 객체에서 전달받은 변수(props)를 초기화할때 사용된다.\r\n                          super()함수는 생성자 함수 가장위에서 호출함(자바와 동일)\r\n  \r\n  3. getDerviedStatefromProps(props, state) : construtor()함수 호출 다음과, render함수 호출 직전에 실행되는 함수.\r\n                                              컴포넌트가 새로운 props를 받게 됐을때 state값을 변경해줌.\r\n\r\n  4. componentDidMount() : 생성과 관련된 함수들중 가장 '마지막'에 실행됨.\r\n                            화면이 만들어지고 나서 할수있는 작업인 이벤트 부여나, 초기화 작업시 활용되는 메서드\r\n                            \r\n  초기화 시에는 setState()함수를 활용함.\r\n  - setstate() : 현재 컴포넌트의 state값을 변경해주며, state값 변경시 render함수가 자동으로 호출됨.\r\n\r\n  ==================================================================================================================================\r\n\r\n  Component의 생명주기 함수중 '변경'과정과 연관된 함수\r\n\r\n  5. shouldComponentUpdate : props, state가 새로운 값으로 갱신되어서 reder()메서드가 호출되어야 하는 시점을 감지하여서\r\n                          컴포넌트를 업데이트 할지 말지 여부를 결정하는 함수.\r\n  반환값은 true/false로 설정하여서 true값 반환시에는 render메서드를 호출하고,\r\n  false값 반환시에는 render함수를 호출하지 않음.\r\n  주의사항 : 초기 랜더링, 강제 없데이트시에는 호출되지 않는다.\r\n\r\n  @ 6. componentDidUpdate() : 컴포넌트가 실제화면에 출견된 이후에 실행.\r\n  부모 컴포넌트로 부터 전달된 이전 props와 이전 state를 인자로 전달받음\r\n    \r\n  ===================================================================================================================================\r\n  \r\n  소멸 과정과 연관된 함수\r\n  @ 7. componentWillUnmount : 컴포넌트가 제거되기 직전에 수행 (이벤트 제거가 핵심. 리액트에서는 이벤트 제거가 중요하다. 내가 원하지 않은 이벤트가 진행될 수 있기 때문에 지워줘야한다.)\r\n  \r\n  \r\n */\r\n\r\nclass Lifecycle extends Component{\r\n  static getDerivedStateFromProps(props, state){\r\n      console.log(\"2. getDerivedStateFromProps 호출\");\r\n      console.log(props, state);\r\n      return {tmp_state : props.props_value};\r\n  }\r\n\r\n  componentDidMount(){\r\n    console.log(\"4. componentDidMount() 호출\");\r\n    this.setState({tmp_state2:true});\r\n  }\r\n\r\n  shouldComponentUpdate(props, state){\r\n    console.log(\"5. shouldComponentupdate 호출 / tmp_state2 = \"+state.tmp_state2);\r\n    return state.tmp_state2;\r\n  }\r\n  constructor(props){\r\n    super(props); // props란? 부모 컴포넌트로 부터 전달받은 데이터\r\n    this.state = {};\r\n    /* \r\n      state? 컴포넌트 내부에서 전역변수로 저장할 객체\r\n      컴포넌트 내부에서 state에 값을 저장하고 변경하면서 화면을 다시 그려줄 목적으로 사용한다.\r\n      ex) 일반 게시글에서 총 댓글 숫자를 저장하고, 새로운 댓글이 달리면 댓글 숫자를 증가시켜주면서 화면을 랜더링 시킨다.\r\n    */\r\n   console.log(\"1. constructor()호출\");\r\n  }\r\n  render(){\r\n    console.log(\"3. render함수 호출\");\r\n    console.log(this.state);\r\n    return(\r\n      <h2>render 함수 호출</h2>\r\n    )\r\n  }\r\n\r\n}\r\n/* \r\n  작성한 컴포넌트를 내보내는 방법\r\n  1. export default 객체명; \r\n  // default :  현재 모듈안에서 내보내기할 객체가 한개일때 사용\r\n  2. export {클래스(함수),상수,배열,...};\r\n*/\r\n// export default Lifecycle;\r\nexport{Lifecycle};"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAS,QAAQ,OAAO;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtCA,SAAAC,MAAA,IAAAC,OAAA;AAwCA,MAAMC,SAAS,SAASH,SAAS;EAC/B,OAAOI,wBAAwBA,CAACC,KAAK,EAAEC,KAAK,EAAC;IACzCC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;IAC7CD,OAAO,CAACC,GAAG,CAACH,KAAK,EAAEC,KAAK,CAAC;IACzB,OAAO;MAACG,SAAS,EAAGJ,KAAK,CAACK;IAAW,CAAC;EAC1C;EAEAC,iBAAiBA,CAAA,EAAE;IACjBJ,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IACxC,IAAI,CAACI,QAAQ,CAAC;MAACC,UAAU,EAAC;IAAI,CAAC,CAAC;EAClC;EAEAC,qBAAqBA,CAACT,KAAK,EAAEC,KAAK,EAAC;IACjCC,OAAO,CAACC,GAAG,CAAC,6CAA6C,GAACF,KAAK,CAACO,UAAU,CAAC;IAC3E,OAAOP,KAAK,CAACO,UAAU;EACzB;EACAE,WAAWA,CAACV,KAAK,EAAC;IAChB,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;IACd,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;IACf;AACJ;AACA;AACA;AACA;IACGC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;EAClC;EACAQ,MAAMA,CAAA,EAAE;IACNT,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IAC7BD,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,KAAK,CAAC;IACvB,oBACEJ,OAAA;MAAAe,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAEzB;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAOlB,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}