{"ast":null,"code":"var _jsxFileName = \"C:\\\\react-workspace\\\\my-app\\\\src\\\\06_FunctionComponent.js\",\n  _s = $RefreshSig$();\n/*\r\n  함수형 컴포넌트.\r\n  return값이 있는 function과 동일한 구조의 컴포넌트\r\n  부모 컴포넌트에게서 props로 파라미터를 전달 받아 사용할 수도 있다.\r\n  render함수가 없기 때문에 return만을 사용하여 화면을 그려준다.\r\n\r\n  state가 없고, 생명주기 함수를 사용할 수가 없음\r\n  \r\n  함수형 컴포넌트에서 state와 생명주기 함수의 기능을 사용해야하는 경우 비슷한\r\n  기능을 제공하는 hook을 추가하면 된다.\r\n\r\n  대표적인 hook함수\r\n  [1] useState() : state변수 값을 선언하게 해주는 메소드. (setState메서드와 비슷한 역할)\r\n\r\n  [2] useEffect(콜백함수) : 생명주기함수중 componentDidMount와 비슷한 역할을 함\r\n\r\n  [3] useCallback(콜백함수) : 매개변수로 들어간 콜백함수를 캐시에 저장하여 빠르게 해당 함수를 실행할 수 있게 도와준다 (성능 최적화에 사용)\r\n\r\n  캐시? 데이터나 값을 미리 저장하는 저장소. 빠르게 저장된 값을 가져오고자할 때 사용한다.\r\n  리액트 훅에서는 전역변수를 캐시에 저장하여 상태값을 가질 수 있게끔 컨트롤함.\r\n\r\n*/\nimport { useState, useEffect, usecallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TestUseState() {\n  _s();\n  /* \r\n      [1] useState() : state변수 값을 선언하게 해주는 메소드\r\n  \r\n      [표현법]\r\n      const [값을 담을 변수, 값을 변경하는 setter함수] = useState(초기값);\r\n      useState메서드는 길이 2짜리 배열을 반환해주며, 이를 구조분해할당을 이용하여 반환된 값을 저장\r\n  \r\n      반환된 값을 담아줄 첫 번째 인자(count) : state의 변수명\r\n      반환된 값을 담아줄 두 번째 인자(setCount) : count값을 변경해주는 함수를 저장 (setState와 비슷한 역할)\r\n   */\n  const [count, setCount] = useState(0);\n  //count 변수에 초기값으로 0으로 설정 -> this.state = {count : 0}\n  // setCount함수는 state값 중 count를 변경해주는 함수를 정장 -> this.setState({count : x})\n\n  // count값을 증가시키는 메서드 increment\n  const increment = () => setCount(count + 1);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: increment,\n      children: \"\\uC99D\\uAC00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), \"count :: \", count]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(TestUseState, \"1kRThAjFNKPouVDb/LmtNcK/vLM=\");\n_c = TestUseState;\nexport { TestUseState };\nvar _c;\n$RefreshReg$(_c, \"TestUseState\");","map":{"version":3,"names":["useState","useEffect","usecallback","jsxDEV","_jsxDEV","TestUseState","_s","count","setCount","increment","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/react-workspace/my-app/src/06_FunctionComponent.js"],"sourcesContent":["/*\r\n  함수형 컴포넌트.\r\n  return값이 있는 function과 동일한 구조의 컴포넌트\r\n  부모 컴포넌트에게서 props로 파라미터를 전달 받아 사용할 수도 있다.\r\n  render함수가 없기 때문에 return만을 사용하여 화면을 그려준다.\r\n\r\n  state가 없고, 생명주기 함수를 사용할 수가 없음\r\n  \r\n  함수형 컴포넌트에서 state와 생명주기 함수의 기능을 사용해야하는 경우 비슷한\r\n  기능을 제공하는 hook을 추가하면 된다.\r\n\r\n  대표적인 hook함수\r\n  [1] useState() : state변수 값을 선언하게 해주는 메소드. (setState메서드와 비슷한 역할)\r\n\r\n  [2] useEffect(콜백함수) : 생명주기함수중 componentDidMount와 비슷한 역할을 함\r\n\r\n  [3] useCallback(콜백함수) : 매개변수로 들어간 콜백함수를 캐시에 저장하여 빠르게 해당 함수를 실행할 수 있게 도와준다 (성능 최적화에 사용)\r\n\r\n  캐시? 데이터나 값을 미리 저장하는 저장소. 빠르게 저장된 값을 가져오고자할 때 사용한다.\r\n  리액트 훅에서는 전역변수를 캐시에 저장하여 상태값을 가질 수 있게끔 컨트롤함.\r\n\r\n*/\r\nimport {useState, useEffect, usecallback} from 'react';\r\n\r\nfunction TestUseState(){\r\n/* \r\n    [1] useState() : state변수 값을 선언하게 해주는 메소드\r\n\r\n    [표현법]\r\n    const [값을 담을 변수, 값을 변경하는 setter함수] = useState(초기값);\r\n    useState메서드는 길이 2짜리 배열을 반환해주며, 이를 구조분해할당을 이용하여 반환된 값을 저장\r\n\r\n    반환된 값을 담아줄 첫 번째 인자(count) : state의 변수명\r\n    반환된 값을 담아줄 두 번째 인자(setCount) : count값을 변경해주는 함수를 저장 (setState와 비슷한 역할)\r\n */\r\n  const [count, setCount ] = useState(0);\r\n  //count 변수에 초기값으로 0으로 설정 -> this.state = {count : 0}\r\n  // setCount함수는 state값 중 count를 변경해주는 함수를 정장 -> this.setState({count : x})\r\n\r\n  // count값을 증가시키는 메서드 increment\r\n  const increment = () => setCount(count+1);\r\n\r\n  return(\r\n    <div>\r\n      <button onClick={increment}>증가</button>\r\n      count :: {count}\r\n    </div>\r\n  )\r\n\r\n\r\n\r\n}\r\n\r\nexport {TestUseState};"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,SAASC,YAAYA,CAAA,EAAE;EAAAC,EAAA;EACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAE,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACtC;EACA;;EAEA;EACA,MAAMS,SAAS,GAAGA,CAAA,KAAMD,QAAQ,CAACD,KAAK,GAAC,CAAC,CAAC;EAEzC,oBACEH,OAAA;IAAAM,QAAA,gBACEN,OAAA;MAAQO,OAAO,EAAEF,SAAU;MAAAC,QAAA,EAAC;IAAE;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,aAC9B,EAACR,KAAK;EAAA;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAKV;AAACT,EAAA,CA3BQD,YAAY;AAAAW,EAAA,GAAZX,YAAY;AA6BrB,SAAQA,YAAY;AAAE,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}